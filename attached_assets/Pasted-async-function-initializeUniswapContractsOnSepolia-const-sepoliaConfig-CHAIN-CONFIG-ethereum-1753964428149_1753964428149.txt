async function initializeUniswapContractsOnSepolia() {
  const sepoliaConfig = CHAIN_CONFIG.ethereum.uniswap;
  
  try {
    console.log('ü¶Ñ Initializing Uniswap V3 contracts on Ethereum Sepolia...');
    console.log(`üìç Factory: ${sepoliaConfig.factory}`);
    console.log(`üìç Quoter: ${sepoliaConfig.quoter}`);
    console.log(`üìç Router: ${sepoliaConfig.router}`);
    
    // Initialize Uniswap V3 contracts with correct Sepolia addresses
    const factory = new ethers.Contract(sepoliaConfig.factory, UNISWAP_V3_ABIS.Factory, ethProvider);
    const quoter = new ethers.Contract(sepoliaConfig.quoter, UNISWAP_V3_ABIS.Quoter, ethProvider);
    const router = new ethers.Contract(sepoliaConfig.router, UNISWAP_V3_ABIS.SwapRouter, ethProvider);
    
    // Test factory contract with USDC/DAI pool
    console.log(`üß™ Testing Uniswap V3 factory for USDC/DAI pool...`);
    
    const usdcDaiPoolAddress = await factory.getPool(
      CHAIN_CONFIG.ethereum.tokens.USDC,
      CHAIN_CONFIG.ethereum.tokens.DAI,
      3000 // 0.3% fee tier
    );
    
    // Test additional pools
    const usdcWethPoolAddress = await factory.getPool(
      CHAIN_CONFIG.ethereum.tokens.USDC,
      CHAIN_CONFIG.ethereum.tokens.WETH,
      3000
    );
    
    console.log(`‚úÖ Uniswap V3 factory is responsive on Sepolia`);
    console.log(`üìä USDC/DAI pool (0.3%): ${usdcDaiPoolAddress === ethers.ZeroAddress ? 'Not created' : usdcDaiPoolAddress}`);
    console.log(`üìä USDC/WETH pool (0.3%): ${usdcWethPoolAddress === ethers.ZeroAddress ? 'Not created' : usdcWethPoolAddress}`);
    
    // Test quoter with a sample quote
    if (usdcDaiPoolAddress !== ethers.ZeroAddress) {
      try {
        const sampleQuote = await quoter.quoteExactInputSingle.staticCall(
          CHAIN_CONFIG.ethereum.tokens.USDC,
          CHAIN_CONFIG.ethereum.tokens.DAI,
          3000,
          ethers.parseUnits('100', 6), // 100 USDC (6 decimals)
          0
        );
        console.log(`üí° Sample quote: 100 USDC = ${ethers.formatUnits(sampleQuote, 18)} DAI`);
      } catch (quoteError) {
        console.log(`‚ö†Ô∏è Quote test failed: ${quoteError.message}`);
      }
    }
    
    uniswapContracts = {
      factory: factory,
      quoter: quoter,
      router: router,
      type: 'uniswap_v3_sepolia',
      addresses: sepoliaConfig
    };
    
    console.log('‚úÖ Uniswap V3 contracts successfully initialized on Ethereum Sepolia');
    
  } catch (error) {
    console.error(`‚ùå Uniswap V3 Sepolia initialization failed: ${error.message}`);
    console.error('Stack:', error.stack);
    
    // Create contracts anyway for development
    uniswapContracts = {
      factory: new ethers.Contract(sepoliaConfig.factory, UNISWAP_V3_ABIS.Factory, ethProvider),
      quoter: new ethers.Contract(sepoliaConfig.quoter, UNISWAP_V3_ABIS.Quoter, ethProvider),
      router: new ethers.Contract(sepoliaConfig.router, UNISWAP_V3_ABIS.SwapRouter, ethProvider),
      type: 'uniswap_v3_sepolia_fallback',
      addresses: sepoliaConfig
    };
    console.log('‚ö†Ô∏è Using fallback contract initialization');
  }
}
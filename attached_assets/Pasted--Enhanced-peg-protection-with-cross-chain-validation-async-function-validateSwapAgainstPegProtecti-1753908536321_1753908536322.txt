// Enhanced peg protection with cross-chain validation
async function validateSwapAgainstPegProtection(fromChain, toChain, fromToken, toToken) {
  try {
    console.log(`üõ°Ô∏è Cross-chain peg validation: ${fromChain} ‚Üí ${toChain}`);
    
    // Get Chainlink USDC/USD prices from both networks
    const chainlinkPrices = await Promise.allSettled([
      getChainlinkPrice('USDC', 'USD', 'celo'),    // Celo Alfajores
      getChainlinkPrice('USDC', 'USD', 'ethereum') // Ethereum Sepolia
    ]);
    
    // Get DEX prices for comparison
    const dexPrices = await Promise.allSettled([
      getUniswapV3Price('USDC', 'cUSD', 3000),  // Celo Uniswap
      getCetusPoolPrice('USDC', 'USDY')         // Sui Cetus
    ]);
    
    const results = {
      chainlink: {},
      dex: {},
      deviations: {},
      safe: true,
      alerts: []
    };
    
    // Process Chainlink prices
    if (chainlinkPrices[0].status === 'fulfilled') {
      results.chainlink.celo = chainlinkPrices[0].value;
    }
    if (chainlinkPrices[1].status === 'fulfilled') {
      results.chainlink.ethereum = chainlinkPrices[1].value;
    }
    
    // Process DEX prices
    if (dexPrices[0].status === 'fulfilled') {
      results.dex.uniswap = dexPrices[0].value;
    }
    if (dexPrices[1].status === 'fulfilled') {
      results.dex.cetus = dexPrices[1].value;
    }
    
    // Calculate deviations
    const basePrice = results.chainlink.ethereum || 1.0; // Use Ethereum as base
    
    // Check Celo Uniswap vs Chainlink
    if (results.dex.uniswap && results.chainlink.celo) {
      const deviation = Math.abs(results.dex.uniswap - results.chainlink.celo) / results.chainlink.celo;
      results.deviations.celoUniswap = {
        deviation: deviation * 100,
        dexPrice: results.dex.uniswap,
        chainlinkPrice: results.chainlink.celo,
        safe: deviation <= pegStatus.alertThreshold
      };
      
      if (deviation > pegStatus.alertThreshold) {
        results.safe = false;
        results.alerts.push(`Celo Uniswap deviation: ${(deviation * 100).toFixed(2)}%`);
      }
    }
    
    // Check Sui Cetus vs Chainlink (using Ethereum feed as reference)
    if (results.dex.cetus && basePrice) {
      const deviation = Math.abs(results.dex.cetus - basePrice) / basePrice;
      results.deviations.suiCetus = {
        deviation: deviation * 100,
        dexPrice: results.dex.cetus,
        chainlinkPrice: basePrice,
        safe: deviation <= pegStatus.alertThreshold
      };
      
      if (deviation > pegStatus.alertThreshold) {
        results.safe = false;
        results.alerts.push(`Sui Cetus deviation: ${(deviation * 100).toFixed(2)}%`);
      }
    }
    
    // Update global peg status
    pegStatus.crossChainValidation.lastValidation = new Date().toISOString();
    pegStatus.crossChainValidation.validationResults = results;
    
    if (!results.safe && pegStatus.crossChainValidation.autoResume) {
      pegStatus.swapsPaused = true;
      console.log('üö® Cross-chain peg protection activated - swaps paused');
    }
    
    return results;
    
  } catch (error) {
    console.error('Peg validation error:', error.message);
    return {
      safe: false,
      error: error.message,
      fallbackUsed: true
    };
  }
}
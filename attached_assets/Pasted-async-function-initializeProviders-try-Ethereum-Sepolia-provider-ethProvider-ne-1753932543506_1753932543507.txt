async function initializeProviders() {
  try {
    // Ethereum Sepolia provider
    ethProvider = new ethers.JsonRpcProvider(CHAIN_CONFIG.ethereum.rpc);
    console.log('üîó Connecting to Ethereum Sepolia...');
    
    // Test Sepolia connection
    const sepoliaNetwork = await ethProvider.getNetwork();
    console.log(`‚úÖ Connected to Ethereum Sepolia (Chain ID: ${sepoliaNetwork.chainId})`);
    
    // Sui Testnet provider
    suiProvider = new SuiClient({
      url: CHAIN_CONFIG.sui.rpc
    });
    console.log('üü¶ Connecting to Sui Testnet...');

    // Test Sui connection
    const suiChainId = await suiProvider.getChainIdentifier();
    console.log(`‚úÖ Connected to Sui Testnet: ${suiChainId}`);

    // Initialize Uniswap V3 contracts on Sepolia
    await initializeUniswapContractsOnSepolia();
    
    // Initialize Cetus contracts on Sui Testnet
    await initializeCetusContracts();
    
    console.log('‚úÖ All providers and DEX contracts initialized for Sepolia-Sui bridge');
  } catch (error) {
    console.error('‚ùå Provider initialization failed:', error.message);
    process.exit(1);
  }
}

async function initializeUniswapContractsOnSepolia() {
  const sepoliaConfig = CHAIN_CONFIG.ethereum.uniswap;
  
  try {
    console.log('ü¶Ñ Initializing Uniswap V3 contracts on Ethereum Sepolia...');
    
    // Initialize Uniswap V3 contracts with Sepolia addresses
    const factory = new ethers.Contract(sepoliaConfig.factory, UNISWAP_V3_ABIS.Factory, ethProvider);
    const router = new ethers.Contract(sepoliaConfig.router, UNISWAP_V3_ABIS.SwapRouter, ethProvider);
    const quoter = new ethers.Contract(sepoliaConfig.quoter, UNISWAP_V3_ABIS.Quoter, ethProvider);
    
    // Test the factory contract
    console.log(`üß™ Testing Uniswap V3 factory at ${sepoliaConfig.factory}...`);
    
    // Try to get a known pool (USDC/WETH on Sepolia)
    const testPoolAddress = await factory.getPool(
      CHAIN_CONFIG.ethereum.tokens.USDC,
      CHAIN_CONFIG.ethereum.tokens.WETH,
      3000 // 0.3% fee tier
    );
    
    console.log(`‚úÖ Uniswap V3 factory is responsive on Sepolia`);
    console.log(`üìä Test pool USDC/WETH (0.3%): ${testPoolAddress === ethers.ZeroAddress ? 'Not created yet' : testPoolAddress}`);
    
    uniswapContracts = {
      factory: factory,
      router: router,
      quoter: quoter,
      type: 'uniswap_v3_sepolia'
    };
    
    console.log('‚úÖ Uniswap V3 contracts successfully initialized on Ethereum Sepolia');
    
  } catch (error) {
    console.error(`‚ùå Uniswap V3 Sepolia initialization failed: ${error.message}`);
    
    // Fallback to mock
    uniswapContracts = {
      factory: null,
      router: null,
      quoter: null,
      type: 'mock'
    };
    console.log('üîÑ Using mock contracts as fallback');
  }
}
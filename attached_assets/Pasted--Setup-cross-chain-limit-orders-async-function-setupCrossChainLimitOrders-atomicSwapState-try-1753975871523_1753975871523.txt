// Setup cross-chain limit orders
async function setupCrossChainLimitOrders(atomicSwapState) {
  try {
    const { fromChain, toChain, fromToken, toToken, amount } = atomicSwapState;
    
    console.log(`ðŸ“‹ Setting up cross-chain limit orders`);
    
    const limitOrders = {};
    
    // Ethereum limit order (1Inch Fusion+)
    if (fromChain === 'ethereum' || toChain === 'ethereum') {
      limitOrders.ethereum = await create1InchLimitOrderOnSepolia({
        tokenIn: CHAIN_CONFIG.ethereum.tokens[fromToken],
        tokenOut: CHAIN_CONFIG.ethereum.tokens[toToken === 'USDC' ? 'USDC' : 'USDC'], // Bridge via USDC
        amount: amount,
        minRate: atomicSwapState.spreadAnalysis.ethereumPrice * 1.002, // 0.2% buffer
        expiration: atomicSwapState.timelock,
        walletAddress: atomicSwapState.walletSession.evmAddress
      });
    }
    
    // Sui limit order (Cetus)
    if (fromChain === 'sui' || toChain === 'sui') {
      limitOrders.sui = await createCetusLimitOrder({
        tokenIn: CHAIN_CONFIG.sui.tokens[fromChain === 'sui' ? fromToken : 'USDC'],
        tokenOut: CHAIN_CONFIG.sui.tokens[toChain === 'sui' ? toToken : 'USDC'],
        amount: amount,
        minRate: atomicSwapState.spreadAnalysis.suiPrice * 1.002,
        expiration: atomicSwapState.timelock,
        walletAddress: atomicSwapState.walletSession.suiAddress
      });
    }
    
    return {
      ethereum: limitOrders.ethereum || null,
      sui: limitOrders.sui || null,
      status: 'CREATED',
      totalOrders: Object.keys(limitOrders).length,
      createdAt: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('Cross-chain limit order setup error:', error);
    return {
      ethereum: null,
      sui: null,
      status: 'FAILED',
      error: error.message
    };
  }
}

// Create 1Inch limit order on Sepolia
async function create1InchLimitOrderOnSepolia(params) {
  try {
    const limitOrder = {
      orderHash: `0x${randomBytes(32).toString('hex')}`,
      orderType: '1inch_limit_order_sepolia',
      chain: 'ethereum',
      chainId: 11155111,
      maker: params.walletAddress,
      makerAsset: params.tokenIn,
      takerAsset: params.tokenOut,
      makingAmount: ethers.parseUnits(params.amount.toString(), 18).toString(),
      takingAmount: ethers.parseUnits((params.amount * params.minRate).toString(), 18).toString(),
      expiration: params.expiration,
      salt: randomBytes(32).toString('hex'),
      status: 'PENDING',
      createdAt: new Date().toISOString(),
      fusionPlusEnabled: true
    };

    return limitOrder;
  } catch (error) {
    throw new Error(`Sepolia limit order creation failed: ${error.message}`);
  }
}